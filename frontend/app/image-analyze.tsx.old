import React, { useState, useRef, useEffect } from 'react';
import { StyleSheet, TouchableOpacity, View, Image, ActivityIndicator, Alert, Platform, Text } from 'react-native';
import { Stack, useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import { CameraView, Camera } from 'expo-camera';

import { ThemedView } from '@/components/ThemedView';
import { ThemedText } from '@/components/ThemedText';
import { Button } from '@/components/ui/Button';
import { ButtonWithIcon } from '@/components/ui/ButtonWithIcon';

export default function ImageAnalyzeScreen() {
    const router = useRouter();
    const [hasPermission, setHasPermission] = useState<boolean | null>(null);
    const [cameraType, setCameraType] = useState<'front' | 'back'>('back');
    const [capturedImage, setCapturedImage] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [showCamera, setShowCamera] = useState<boolean>(false);
    const cameraRef = useRef<CameraView>(null);    useEffect(() => {
        (async () => {
            const { status: cameraStatus } = await Camera.requestCameraPermissionsAsync();
            const { status: libraryStatus } = await ImagePicker.requestMediaLibraryPermissionsAsync();

            setHasPermission(
                cameraStatus === 'granted' && libraryStatus === 'granted'
            );

            if (cameraStatus !== 'granted' || libraryStatus !== 'granted') {
                Alert.alert(
                    'Permissions Required',
                    'Camera and photo library permissions are required for this app to function properly.',
                    [{ text: 'OK' }]
                );
            }
        })();
    }, []);    const takePicture = async () => {
        if (cameraRef.current) {
            try {
                const photo = await cameraRef.current.takePictureAsync({
                    quality: 0.7,
                });
                setCapturedImage(photo.uri);
                setShowCamera(false);
            } catch (error) {
                console.error('Error taking picture:', error);
                Alert.alert('Error', 'Failed to take picture. Please try again.');
            }
        }
    };

    const pickImage = async () => {
        try {
            const result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ImagePicker.MediaTypeOptions.Images,
                allowsEditing: true,
                aspect: [4, 3],
                quality: 0.7,
                base64: true,
            });

            if (!result.canceled && result.assets && result.assets.length > 0) {
                setCapturedImage(result.assets[0].uri);
            }
        } catch (error) {
            console.error('Error picking image:', error);
            Alert.alert('Error', 'Failed to pick image. Please try again.');
        }
    };

    const analyzeImage = async () => {
        if (!capturedImage) return;

        setIsLoading(true);

        try {
            // TODO: Implement API call to analyze the image
            // For now, we'll just simulate a delay
            await new Promise(resolve => setTimeout(resolve, 2000));

            // Navigate to food details screen with the analyzed data
            router.push('/food-details');
        } catch (error) {
            console.error('Error analyzing image:', error);
            Alert.alert('Error', 'Failed to analyze image. Please try again.');
        } finally {
            setIsLoading(false);
        }
    };

    const toggleCamera = () => {
        if (capturedImage) {
            setCapturedImage(null);
        } else {
            setShowCamera(!showCamera);
        }
    };    const toggleCameraType = () => {
        setCameraType(current => (
            current === 'back' ? 'front' : 'back'
        ));
    };

    if (hasPermission === null) {
        return (
            <ThemedView style={styles.container}>
                <ActivityIndicator size="large" color="#163166" />
                <ThemedText style={styles.permissionText}>Requesting camera permissions...</ThemedText>
            </ThemedView>
        );
    }

    if (hasPermission === false) {
        return (
            <ThemedView style={styles.container}>
                <Ionicons name="alert-circle" size={48} color="#FF6B6B" />
                <ThemedText style={styles.permissionText}>
                    No access to camera or photo library. Please enable permissions in your device settings.
                </ThemedText>
            </ThemedView>
        );
    }

    return (
        <ThemedView style={styles.container}>
            <Stack.Screen options={{
                title: 'Image Analyze',
                headerShown: true,
                headerStyle: {
                    backgroundColor: '#163166',
                },
                headerTintColor: '#fff',
            }} />            {showCamera ? (
                <View style={styles.cameraContainer}>
                    <CameraView
                        ref={cameraRef}
                        style={styles.camera}
                        facing={cameraType}
                        ratio="4:3"
                    />
                    <View style={styles.cameraControls}>
                        <TouchableOpacity
                            style={styles.cameraButton}
                            onPress={toggleCamera}
                        >
                            <Ionicons name="close" size={28} color="#fff" />
                        </TouchableOpacity>

                        <TouchableOpacity
                            style={styles.captureButton}
                            onPress={takePicture}
                        >
                            <View style={styles.captureButtonInner} />
                        </TouchableOpacity>

                        <TouchableOpacity
                            style={styles.cameraButton}
                            onPress={toggleCameraType}
                        >
                            <Ionicons name="camera-reverse" size={28} color="#fff" />
                        </TouchableOpacity>
                    </View>
                </View>
            ) : capturedImage ? (
                <View style={styles.previewContainer}>
                    <Image source={{ uri: capturedImage }} style={styles.previewImage} />
                    <View style={styles.previewControls}>
                        <Button
                            title="Discard"
                            type="secondary"
                            onPress={() => setCapturedImage(null)}
                            style={styles.previewButton}
                        />
                        <Button
                            title={isLoading ? "Analyzing..." : "Analyze Food"}
                            onPress={analyzeImage}
                            disabled={isLoading}
                            style={[styles.previewButton, styles.analyzeButton]}
                        />
                    </View>
                    {isLoading && (
                        <ActivityIndicator
                            size="large"
                            color="#163166"
                            style={styles.loadingIndicator}
                        />
                    )}
                </View>
            ) : (
                <View style={styles.optionsContainer}>
                    <ThemedText type="title" style={styles.title}>Food Image Analysis</ThemedText>
                    <ThemedText style={styles.description}>
                        Take a photo of your food or select from gallery to analyze nutritional content
                    </ThemedText>

                    <View style={styles.buttonContainer}>
                        <ButtonWithIcon
                            title="Take Photo"
                            onPress={toggleCamera}
                            icon={<Ionicons name="camera" size={24} color="#fff" />}
                            type="primary"
                        />

                        <ButtonWithIcon
                            title="Upload from Gallery"
                            onPress={pickImage}
                            icon={<Ionicons name="images" size={24} color="#163166" />}
                            type="secondary"
                        />
                    </View>

                    <View style={styles.instructionsContainer}>
                        <ThemedText type="defaultSemiBold" style={styles.instructionsTitle}>
                            Tips for better analysis:
                        </ThemedText>
                        <View style={styles.instructionItem}>
                            <Ionicons name="checkmark-circle" size={18} color="#47b255" />
                            <ThemedText style={styles.instructionText}>
                                Ensure good lighting for clear photos
                            </ThemedText>
                        </View>
                        <View style={styles.instructionItem}>
                            <Ionicons name="checkmark-circle" size={18} color="#47b255" />
                            <ThemedText style={styles.instructionText}>
                                Capture all food items in the frame
                            </ThemedText>
                        </View>
                        <View style={styles.instructionItem}>
                            <Ionicons name="checkmark-circle" size={18} color="#47b255" />
                            <ThemedText style={styles.instructionText}>
                                Take photos from directly above for best results
                            </ThemedText>
                        </View>
                    </View>
                </View>
            )}
        </ThemedView>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f9f9f9',
    },
    permissionText: {
        marginTop: 20,
        textAlign: 'center',
        padding: 20,
        fontSize: 16,
    },
    optionsContainer: {
        flex: 1,
        padding: 20,
        justifyContent: 'center',
        alignItems: 'center',
    },
    title: {
        fontSize: 28,
        marginBottom: 12,
        textAlign: 'center',
    },
    description: {
        fontSize: 16,
        textAlign: 'center',
        marginBottom: 40,
        color: '#555',
    },
    buttonContainer: {
        width: '100%',
        marginBottom: 40,
    },
    instructionsContainer: {
        width: '100%',
        backgroundColor: '#fff',
        borderRadius: 12,
        padding: 16,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 2,
    },
    instructionsTitle: {
        fontSize: 18,
        marginBottom: 12,
        color: '#333',
    },
    instructionItem: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 10,
    },
    instructionText: {
        marginLeft: 10,
        fontSize: 14,
        color: '#555',
    },
    cameraContainer: {
        flex: 1,
        width: '100%',
    },
    camera: {
        flex: 1,
        width: '100%',
    },
    cameraControls: {
        position: 'absolute',
        bottom: 30,
        left: 0,
        right: 0,
        flexDirection: 'row',
        justifyContent: 'space-around',
        alignItems: 'center',
    },
    cameraButton: {
        width: 50,
        height: 50,
        borderRadius: 25,
        backgroundColor: 'rgba(0, 0, 0, 0.6)',
        justifyContent: 'center',
        alignItems: 'center',
    },
    captureButton: {
        width: 70,
        height: 70,
        borderRadius: 35,
        backgroundColor: 'rgba(255, 255, 255, 0.3)',
        justifyContent: 'center',
        alignItems: 'center',
        borderWidth: 2,
        borderColor: '#fff',
    },
    captureButtonInner: {
        width: 54,
        height: 54,
        borderRadius: 27,
        backgroundColor: '#fff',
    },
    previewContainer: {
        flex: 1,
        width: '100%',
        position: 'relative',
    },
    previewImage: {
        flex: 1,
        resizeMode: 'contain',
    },
    previewControls: {
        position: 'absolute',
        bottom: 0,
        left: 0,
        right: 0,
        flexDirection: 'row',
        justifyContent: 'space-around',
        padding: 20,
        backgroundColor: 'rgba(255, 255, 255, 0.9)',
    },
    previewButton: {
        flex: 1,
        marginHorizontal: 8,
    },
    analyzeButton: {
        backgroundColor: '#163166',
    },
    loadingIndicator: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(255, 255, 255, 0.7)',
        justifyContent: 'center',
        alignItems: 'center',
    }
});

