/**
 * Nutrition Comment Service
 * Generates nutrition comments based on the percentage difference between food nutrition and target nutrition for specific meal types
 */
class NutritionCommentService {
    /**
     * Generate comments for all nutrition types based on food and target nutrition for a specific meal type
     * @param {Object} foodNutrition - Food nutrition values
     * @param {Object} targetNutrition - Target nutrition values
     * @param {String} mealType - Meal type (breakfast, lunch, dinner, snack)
     * @returns {Object} Comments for each nutrition type
     */
    static generateAllComments(foodNutrition, targetNutrition, mealType) {
        // Extract nutrition values from food
        const foodCalories = foodNutrition.total_calorie || 0;
        const foodProtein = foodNutrition.total_protein || 0;
        const foodFat = foodNutrition.total_fat || 0;
        const foodCarb = foodNutrition.total_carb || 0;
        const foodFiber = foodNutrition.total_fiber || 0;

        // Get the appropriate meal target based on meal type
        const mealTarget = this.getMealTargetNutrition(targetNutrition, mealType);

        // Extract target nutrition values for the specific meal
        const targetCalories = mealTarget.calories || 0;
        const targetProtein = mealTarget.protein || 0;
        const targetFat = mealTarget.fat || 0;
        const targetCarb = mealTarget.carbs || 0;
        const targetFiber = mealTarget.fiber || 0;

        // Calculate percentage for each nutrition type
        const proteinPercentage = targetProtein > 0 ? (foodProtein / targetProtein) * 100 : 0;
        const fatPercentage = targetFat > 0 ? (foodFat / targetFat) * 100 : 0;
        const carbPercentage = targetCarb > 0 ? (foodCarb / targetCarb) * 100 : 0;
        const fiberPercentage = targetFiber > 0 ? (foodFiber / targetFiber) * 100 : 0;
        const caloriesPercentage = targetCalories > 0 ? (foodCalories / targetCalories) * 100 : 0;

        // Generate comments for each nutrition type
        const proteinComment = this.getProteinComment(proteinPercentage);
        const fatComment = this.getFatComment(fatPercentage);
        const carbComment = this.getCarbComment(carbPercentage);
        const fiberComment = this.getFiberComment(fiberPercentage);
        const caloriesComment = this.getCaloriesComment(caloriesPercentage);

        return {
            protein: {
                type: 'Protein',
                percentage: Math.round(proteinPercentage),
                comment: proteinComment,
                icon: 'ü•©'
            },
            fat: {
                type: 'Fat',
                percentage: Math.round(fatPercentage),
                comment: fatComment,
                icon: 'ü•ë'
            },
            carbs: {
                type: 'Carbohydrate',
                percentage: Math.round(carbPercentage),
                comment: carbComment,
                icon: 'üçö'
            },
            fiber: {
                type: 'Fiber',
                percentage: Math.round(fiberPercentage),
                comment: fiberComment,
                icon: 'ü•¶'
            },
            calories: {
                type: 'Calories',
                percentage: Math.round(caloriesPercentage),
                comment: caloriesComment,
                icon: 'üî•'
            }
        };
    }

    /**
     * Get comment for protein based on percentage
     * @param {Number} percentage - Percentage of protein compared to target
     * @returns {String} Comment
     */
    static getProteinComment(percentage) {
        if (percentage < 70) {
            return 'N√™n b·ªï sung th√™m ƒë·∫°m t·ª´ th·ªãt, tr·ª©ng, ƒë·∫≠u ho·∫∑c s·ªØa ƒë·ªÉ h·ªó tr·ª£ duy tr√¨ c∆° v√† mi·ªÖn d·ªãch.';
        } else if (percentage >= 70 && percentage < 90) {
            return 'C·∫ßn tƒÉng nh·∫π l∆∞·ª£ng protein, nh·∫•t l√† n·∫øu c√≥ t·∫≠p luy·ªán ho·∫∑c c·∫ßn duy tr√¨ kh·ªëi c∆°.';
        } else if (percentage >= 90 && percentage < 110) {
            return 'L∆∞·ª£ng protein ph√π h·ª£p v·ªõi nhu c·∫ßu, h·ªó tr·ª£ t·ªët cho s·ª©c kh·ªèe v√† ph·ª•c h·ªìi.';
        } else if (percentage >= 110 && percentage < 130) {
            return 'C√≥ th·ªÉ gi·∫£m nh·∫π n·∫øu kh√¥ng t·∫≠p luy·ªán nhi·ªÅu, ∆∞u ti√™n ƒë·∫°m t·ª´ c√° ho·∫∑c ƒë·∫≠u.';
        } else {
            return 'N√™n ƒëi·ªÅu ch·ªânh l∆∞·ª£ng ƒë·∫°m n·∫øu s·ª≠ d·ª•ng l√¢u d√†i, tr√°nh g√¢y √°p l·ª±c l√™n th·∫≠n.';
        }
    }

    /**
     * Get comment for fat based on percentage
     * @param {Number} percentage - Percentage of fat compared to target
     * @returns {String} Comment
     */
    static getFatComment(percentage) {
        if (percentage < 70) {
            return 'N√™n b·ªï sung ch·∫•t b√©o l√†nh m·∫°nh t·ª´ d·∫ßu olive, c√° b√©o, b∆° ho·∫∑c h·∫°t ƒë·ªÉ h·ªó tr·ª£ h·∫•p thu vitamin.';
        } else if (percentage >= 70 && percentage < 90) {
            return 'C√≥ th·ªÉ th√™m ch√∫t ch·∫•t b√©o t·ªët ƒë·ªÉ c√¢n b·∫±ng nƒÉng l∆∞·ª£ng v√† n·ªôi ti·∫øt.';
        } else if (percentage >= 90 && percentage < 110) {
            return 'L∆∞·ª£ng ch·∫•t b√©o h·ª£p l√Ω, h·ªó tr·ª£ t·ªët cho nƒÉng l∆∞·ª£ng d√†i h·∫°n v√† trao ƒë·ªïi ch·∫•t.';
        } else if (percentage >= 110 && percentage < 130) {
            return 'N√™n ch·ªçn ch·∫•t b√©o kh√¥ng b√£o h√≤a, h·∫°n ch·∫ø ƒë·ªì chi√™n v√† m·ª° ƒë·ªông v·∫≠t.';
        } else {
            return 'C·∫ßn gi·∫£m l∆∞·ª£ng ch·∫•t b√©o t·ªïng th·ªÉ ƒë·ªÉ h·ªó tr·ª£ ki·ªÉm so√°t c√¢n n·∫∑ng v√† m·ª° m√°u.';
        }
    }

    /**
     * Get comment for carbs based on percentage
     * @param {Number} percentage - Percentage of carbs compared to target
     * @returns {String} Comment
     */
    static getCarbComment(percentage) {
        if (percentage < 70) {
            return 'N√™n b·ªï sung carb t·ª´ ng≈© c·ªëc nguy√™n h·∫°t, tr√°i c√¢y ho·∫∑c khoai ƒë·ªÉ ƒë·∫£m b·∫£o nƒÉng l∆∞·ª£ng.';
        } else if (percentage >= 70 && percentage < 90) {
            return 'C·∫ßn tƒÉng nh·∫π l∆∞·ª£ng carb ph·ª©c h·ª£p ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t v√† t·∫≠p trung.';
        } else if (percentage >= 90 && percentage < 110) {
            return 'Carb c√¢n ƒë·ªëi, cung c·∫•p nƒÉng l∆∞·ª£ng ·ªïn ƒë·ªãnh cho c∆° th·ªÉ.';
        } else if (percentage >= 110 && percentage < 130) {
            return 'C√≥ th·ªÉ gi·∫£m nh·∫π n·∫øu √≠t v·∫≠n ƒë·ªông, ∆∞u ti√™n carb c√≥ ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt th·∫•p.';
        } else {
            return 'N√™n h·∫°n ch·∫ø tinh b·ªôt tinh ch·∫ø v√† tƒÉng c∆∞·ªùng v·∫≠n ƒë·ªông n·∫øu c·∫ßn.';
        }
    }

    /**
     * Get comment for fiber based on percentage
     * @param {Number} percentage - Percentage of fiber compared to target
     * @returns {String} Comment
     */
    static getFiberComment(percentage) {
        if (percentage < 70) {
            return 'N√™n tƒÉng c∆∞·ªùng rau, tr√°i c√¢y v√† ng≈© c·ªëc nguy√™n h·∫°t ƒë·ªÉ h·ªó tr·ª£ ti√™u h√≥a v√† ki·ªÉm so√°t ƒë∆∞·ªùng huy·∫øt.';
        } else if (percentage >= 70 && percentage < 90) {
            return 'C√≥ th·ªÉ th√™m rau ho·∫∑c tr√°i c√¢y trong kh·∫©u ph·∫ßn ƒë·ªÉ c·∫£i thi·ªán s·ª©c kh·ªèe ƒë∆∞·ªùng ru·ªôt.';
        } else if (percentage >= 90 && percentage < 110) {
            return 'Ch·∫•t x∆° ƒë·∫°t m·ª©c t·ªët, gi√∫p ti√™u h√≥a v√† t·∫°o c·∫£m gi√°c no t·ª± nhi√™n.';
        } else if (percentage >= 110 && percentage < 130) {
            return 'N√™n u·ªëng ƒë·ªß n∆∞·ªõc n·∫øu l∆∞·ª£ng ch·∫•t x∆° cao ƒë·ªÉ tr√°nh ƒë·∫ßy h∆°i.';
        } else {
            return 'C·∫ßn gi·∫£m nh·∫π ch·∫•t x∆° n·∫øu g·∫∑p kh√≥ ch·ªãu ti√™u h√≥a, k·∫øt h·ª£p v·ªõi n∆∞·ªõc ƒë·∫ßy ƒë·ªß.';
        }
    }

    /**
     * Get comment for calories based on percentage
     * @param {Number} percentage - Percentage of calories compared to target
     * @returns {String} Comment
     */
    static getCaloriesComment(percentage) {
        if (percentage < 70) {
            return 'N√™n tƒÉng nƒÉng l∆∞·ª£ng n·∫°p v√†o ƒë·ªÉ tr√°nh thi·∫øu h·ª•t dinh d∆∞·ª°ng v√† gi·∫£m trao ƒë·ªïi ch·∫•t.';
        } else if (percentage >= 70 && percentage < 90) {
            return 'C·∫ßn tƒÉng nh·∫π kh·∫©u ph·∫ßn n·∫øu kh√¥ng trong ch·∫ø ƒë·ªô gi·∫£m c√¢n.';
        } else if (percentage >= 90 && percentage < 110) {
            return 'M·ª©c calo h·ª£p l√Ω, h·ªó tr·ª£ duy tr√¨ c√¢n n·∫∑ng v√† nƒÉng l∆∞·ª£ng ·ªïn ƒë·ªãnh.';
        } else if (percentage >= 110 && percentage < 130) {
            return 'C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh kh·∫©u ph·∫ßn n·∫øu kh√¥ng ho·∫°t ƒë·ªông nhi·ªÅu, tr√°nh t√≠ch m·ª°.';
        } else {
            return 'N√™n gi·∫£m nƒÉng l∆∞·ª£ng n·∫°p v√†o ho·∫∑c tƒÉng c∆∞·ªùng v·∫≠n ƒë·ªông ƒë·ªÉ c√¢n ƒë·ªëi.';
        }
    }

    /**
     * Get meal-specific target nutrition
     * @param {Object} targetNutrition - Target nutrition values
     * @param {String} mealType - Meal type (breakfast, lunch, dinner, snack)
     * @returns {Object} Meal-specific target nutrition
     */
    static getMealTargetNutrition(targetNutrition, mealType) {
        if (!targetNutrition || !targetNutrition.meals) {
            // Fallback values if target nutrition is not available
            return {
                calories: 500,
                protein: 25,
                fat: 17,
                carbs: 60,
                fiber: 7
            };
        }

        // Get meal-specific target or fallback to default proportions if not found
        switch (mealType) {
            case 'breakfast':
                return targetNutrition.meals.breakfast || {
                    calories: targetNutrition.daily.calories * 0.3,
                    protein: targetNutrition.daily.protein * 0.3,
                    fat: targetNutrition.daily.fat * 0.3,
                    carbs: targetNutrition.daily.carbs * 0.3,
                    fiber: targetNutrition.daily.fiber * 0.3
                };
            case 'lunch':
                return targetNutrition.meals.lunch || {
                    calories: targetNutrition.daily.calories * 0.35,
                    protein: targetNutrition.daily.protein * 0.35,
                    fat: targetNutrition.daily.fat * 0.35,
                    carbs: targetNutrition.daily.carbs * 0.35,
                    fiber: targetNutrition.daily.fiber * 0.35
                };
            case 'dinner':
                return targetNutrition.meals.dinner || {
                    calories: targetNutrition.daily.calories * 0.25,
                    protein: targetNutrition.daily.protein * 0.25,
                    fat: targetNutrition.daily.fat * 0.25,
                    carbs: targetNutrition.daily.carbs * 0.25,
                    fiber: targetNutrition.daily.fiber * 0.25
                };
            case 'snack':
                return targetNutrition.meals.snack || {
                    calories: targetNutrition.daily.calories * 0.1,
                    protein: targetNutrition.daily.protein * 0.1,
                    fat: targetNutrition.daily.fat * 0.1,
                    carbs: targetNutrition.daily.carbs * 0.1,
                    fiber: targetNutrition.daily.fiber * 0.1
                };
            default:
                // If no meal type specified, use 25% of daily values as default
                return {
                    calories: targetNutrition.daily.calories * 0.25,
                    protein: targetNutrition.daily.protein * 0.25,
                    fat: targetNutrition.daily.fat * 0.25,
                    carbs: targetNutrition.daily.carbs * 0.25,
                    fiber: targetNutrition.daily.fiber * 0.25
                };
        }
    }
}

module.exports = NutritionCommentService;
