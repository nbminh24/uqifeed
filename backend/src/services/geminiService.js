const { GoogleGenerativeAI } = require('@google/generative-ai');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

/**
 * Gemini Service
 * Handles interactions with Google's Gemini API for image analysis
 */
class GeminiService {
    constructor() {
        // Tr·ª±c ti·∫øp ƒë·ªçc file .env ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y ƒë∆∞·ª£c GEMINI_API_KEY
        const envPath = path.resolve(__dirname, '../../.env');
        console.log('Path to .env file:', envPath);

        let geminiApiKey = process.env.GEMINI_API_KEY;

        // N·∫øu kh√¥ng t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng, ƒë·ªçc tr·ª±c ti·∫øp t·ª´ file
        if (!geminiApiKey && fs.existsSync(envPath)) {
            const envContent = fs.readFileSync(envPath, 'utf8');
            const match = envContent.match(/GEMINI_API_KEY=([^\r\n]+)/);
            if (match && match[1]) {
                geminiApiKey = match[1];
                console.log('GEMINI_API_KEY loaded from file');
            }
        }

        console.log('GEMINI_API_KEY:', geminiApiKey ? 'Defined' : 'Undefined');

        // Make sure API key is loaded
        if (!geminiApiKey) {
            throw new Error('GEMINI_API_KEY is not defined in environment variables or .env file');
        }

        this.genAI = new GoogleGenerativeAI(geminiApiKey);
        this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    }

    /**
     * Analyze a food image and extract detailed information
     * @param {String} base64Image - Base64 encoded image string
     * @returns {Object} Detailed food information
     */
    async analyzeFoodImage(base64Image) {
        try {
            if (!base64Image) {
                throw new Error('No base64 image provided');
            }

            // Extract the mime type and actual base64 data
            const matches = base64Image.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);

            if (!matches || matches.length !== 3) {
                throw new Error('Invalid base64 string');
            }

            const mimeType = matches[1];
            const base64Data = matches[2];

            // Prepare the image for Gemini API
            const imagePart = {
                inlineData: {
                    data: base64Data,
                    mimeType: mimeType
                }
            };            // Prepare the prompt for the model
            const prompt = `
            üß† Ph√¢n t√≠ch ·∫£nh m√≥n ƒÉn v√† xu·∫•t th√¥ng tin chi ti·∫øt

            Y√™u c·∫ßu:
            Ph√¢n t√≠ch ·∫£nh m√≥n ƒÉn v√† tr·∫£ v·ªÅ c√°c th√¥ng tin chi ti·∫øt b√™n d∆∞·ªõi. Lu√¥n n√≥i m·ªôt c√°ch kh·∫≥ng ƒë·ªãnh v√† c·ª• th·ªÉ. Kh√¥ng s·ª≠ d·ª•ng b·∫•t k·ª≥ t·ª´ ng·ªØ n√†o mang t√≠nh suy ƒëo√°n nh∆∞ "c√≥ th·ªÉ l√†", "c√≥ v·∫ª nh∆∞", "likely", "possibly"...

            Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:
            {
              "foodName": "T√™n m√≥n ƒÉn r√µ r√†ng v√† c·ª• th·ªÉ",
              "foodDescription": {
                "Ngu·ªìn g·ªëc v√† √Ω nghƒ©a vƒÉn h√≥a": "M√¥ t·∫£ ngu·ªìn g·ªëc v√† vƒÉn h√≥a m√≥n ƒÉn (b·∫±ng ng√¥n ng·ªØ d√¢n d√£, d·ªÖ hi·ªÉu)",
                "H∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng": "M√¥ t·∫£ v·ªã gi√°c n·ªïi b·∫≠t (gi√≤n, b√©o, chua, cay, ng·ªçt...)",
                "Ph∆∞∆°ng ph√°p ch·∫ø bi·∫øn truy·ªÅn th·ªëng": "T√≥m t·∫Øt ph∆∞∆°ng ph√°p n·∫•u ch√≠nh (lu·ªôc, chi√™n, n∆∞·ªõng...)"
              },
              "foodIngredientList": [
                {
                  "Ingredient Name": "T√™n nguy√™n li·ªáu",
                  "Ingredient Amount": "L∆∞·ª£ng (100g, 1 c·ªß...)",
                  "Ingredient Protein": "L∆∞·ª£ng protein (g)",
                  "Ingredient Fat": "L∆∞·ª£ng ch·∫•t b√©o (g)",
                  "Ingredient Carb": "L∆∞·ª£ng carbohydrate (g)",
                  "Ingredient Fiber": "L∆∞·ª£ng ch·∫•t x∆° (g)",
                  "Ingredient Description": {
                    "Ngu·ªìn g·ªëc & m√¥ t·∫£ d√¢n d√£": "M√¥ t·∫£ g·∫ßn g≈©i, d·ªÖ hi·ªÉu",
                    "L·ª£i √≠ch dinh d∆∞·ª°ng": "C√°c ƒëi·ªÉm m·∫°nh v·ªÅ s·ª©c kh·ªèe",
                    "C√°ch d√πng trong ·∫©m th·ª±c": "C√°ch th∆∞·ªùng d√πng trong ·∫©m th·ª±c"
                  }
                }
              ],
              "foodAdvice": {
                "Nutrition Summary": "T√≥m t·∫Øt gi√° tr·ªã dinh d∆∞·ª°ng c·ªßa m√≥n ƒÉn",
                "Healthier Suggestions": "G·ª£i √Ω c√°ch l√†m m√≥n ƒÉn l√†nh m·∫°nh h∆°n",
                "Consumption Tips": "L·ªùi khuy√™n v·ªÅ kh·∫©u ph·∫ßn, t·∫ßn su·∫•t ƒÉn, m√≥n k·∫øt h·ª£p"
              },
              "foodPreparation": {
                "C√°ch l√†m": [
                  "B∆∞·ªõc 1: ...",
                  "B∆∞·ªõc 2: ...",
                  "..."
                ]
              }
            }

            H∆∞·ªõng d·∫´n c·ª• th·ªÉ:

            1. üè∑Ô∏è T√™n m√≥n ƒÉn (foodName):
            Cung c·∫•p t√™n m√≥n ƒÉn ch√≠nh x√°c. N·∫øu kh√¥ng bi·∫øt ch√≠nh x√°c t√™n m√≥n, h√£y ƒë·∫∑t t√™n c·ª• th·ªÉ d·ª±a tr√™n c√°c nguy√™n li·ªáu ch√≠nh, theo ki·ªÉu: [C√°ch ch·∫ø bi·∫øn] + [Nguy√™n li·ªáu ch√≠nh] (v√≠ d·ª•: Salad g√† v√† c√† chua, C∆°m chi√™n tr·ª©ng v√† ƒë·∫≠u, M√¨ x√†o rau c·ªß,...).

            2. üìú M√¥ t·∫£ m√≥n ƒÉn (foodDescription):
            M√¥ t·∫£ m√≥n ƒÉn v·ªõi ba n·ªôi dung r√µ r√†ng v·ªÅ ngu·ªìn g·ªëc vƒÉn h√≥a, h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng v√† ph∆∞∆°ng ph√°p ch·∫ø bi·∫øn.

            3. üßÇ Danh s√°ch nguy√™n li·ªáu (foodIngredientList):
            Li·ªát k√™ √≠t nh·∫•t 3 nguy√™n li·ªáu ch√≠nh v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ l∆∞·ª£ng, gi√° tr·ªã dinh d∆∞·ª°ng v√† m√¥ t·∫£.

            4. üß† Ph√¢n t√≠ch dinh d∆∞·ª°ng & l·ªùi khuy√™n (foodAdvice):
            Cung c·∫•p t√≥m t·∫Øt dinh d∆∞·ª°ng, ƒë·ªÅ xu·∫•t c√°ch l√†m l√†nh m·∫°nh h∆°n v√† l·ªùi khuy√™n khi s·ª≠ d·ª•ng.

            5. üç≥ C√°ch ch·∫ø bi·∫øn m√≥n ƒÉn (foodPreparation):
            Li·ªát k√™ c√°c b∆∞·ªõc n·∫•u m√≥n ƒÉn m·ªôt c√°ch r√µ r√†ng v√† tu·∫ßn t·ª±.

            ƒê·∫£m b·∫£o s·ª≠ d·ª•ng ng√¥n ng·ªØ d·ª©t kho√°t, kh·∫≥ng ƒë·ªãnh. N·∫øu h·ªá th·ªëng AI ph·∫£i ƒëo√°n, h√£y ƒëo√°n m·ªôt c√°ch d·ª©t kho√°t, h·ª£p l√Ω v√† ƒë·∫ßy ƒë·ªß ng·ªØ nghƒ©a.
            `;

            // Call the Gemini API
            const result = await this.model.generateContent([prompt, imagePart]);
            const response = await result.response;
            const text = response.text();

            // Extract the JSON data from the response
            let foodData;
            try {
                // Find JSON in the response (might be wrapped in markdown code blocks)
                const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) ||
                    text.match(/{[\s\S]*}/); const jsonString = jsonMatch ?
                        (jsonMatch[1] ? jsonMatch[1] : jsonMatch[0]) :
                        text;

                foodData = JSON.parse(jsonString);

                // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu c√≥ gi√° tr·ªã
                if (!foodData.foodName) foodData.foodName = "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh t√™n m√≥n ƒÉn";
                if (!foodData.foodDescription) {
                    foodData.foodDescription = {
                        "Ngu·ªìn g·ªëc v√† √Ω nghƒ©a vƒÉn h√≥a": "Kh√¥ng c√≥ th√¥ng tin",
                        "H∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng": "Kh√¥ng c√≥ th√¥ng tin",
                        "Ph∆∞∆°ng ph√°p ch·∫ø bi·∫øn truy·ªÅn th·ªëng": "Kh√¥ng c√≥ th√¥ng tin"
                    };
                }
                if (!foodData.foodIngredientList) foodData.foodIngredientList = [];
                if (!foodData.foodAdvice) {
                    foodData.foodAdvice = {
                        "Nutrition Summary": "Kh√¥ng c√≥ th√¥ng tin",
                        "Healthier Suggestions": "Kh√¥ng c√≥ th√¥ng tin",
                        "Consumption Tips": "Kh√¥ng c√≥ th√¥ng tin"
                    };
                }
                if (!foodData.foodPreparation) {
                    foodData.foodPreparation = {
                        "C√°ch l√†m": ["Kh√¥ng c√≥ th√¥ng tin v·ªÅ c√°ch ch·∫ø bi·∫øn m√≥n ƒÉn n√†y"]
                    };
                }
            } catch (error) {
                console.error('Error parsing JSON from Gemini response:', error);
                // If parsing fails, return the raw text
                return {
                    raw: text,
                    error: 'Failed to parse structured data'
                };
            }

            return {
                processed: true,
                imageType: mimeType,
                imageSize: base64Data.length,
                foodData,
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            console.error('Error analyzing food image with Gemini:', error);
            throw error;
        }
    }
}

// Create a singleton instance
const geminiService = new GeminiService();

module.exports = geminiService;
